---

kind: PersistentVolume
apiVersion: v1
metadata:
  name: kube-registry-volume
  labels:
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
spec:
  capacity:
    storage: {% if network_storage %}{{ k8s_kube_registry_network_volume_size }}{% else %}{{ k8s_kube_registry_local_volume_size }}{% endif %}

  accessModes:
    - ReadWriteOnce
{% if network_storage and network_storage_type == 'gce' %}
  gcePersistentDisk:
    fsType: 'xfs'
    pdName: '{{ gce_storage_name }}'
{% endif %}
{% if network_storage and network_storage_type == 'ceph' %}
  rbd:
    monitors:
{% for item in k8s_storage_hosts %}
      - {{ item }}:{{ ceph_monitor_port }}
{% endfor %}
    pool: {{ ceph_pull_name }}
    image: {{ ceph_rbd_image_name }}
    user: {{ ceph_user_name }}
    keyring: /etc/ceph/ceph.client.{{ ceph_user_name }}.keyring
    secretRef:
      name: ceph-secret
    fsType: xfs
    readOnly: false
{% endif %}
{% if not network_storage %}
  hostPath:
    path: {{ k8s_kube_registry_dir }}
{% endif %}
  persistentVolumeReclaimPolicy: Retain

---

kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: kube-registry-claim
  namespace: kube-system
  labels:
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: {% if network_storage %}{{ k8s_kube_registry_network_volume_size }}{% else %}{{ k8s_kube_registry_local_volume_size }}{% endif %}

---

apiVersion: v1
kind: Secret
metadata:
  name: registry-auth-secret
  namespace: kube-system
type: Opaque
data:
  htpasswd: {{ k8s_docker_registry_token }}

---

apiVersion: v1
kind: Secret
metadata:
  name: registry-pull-secret
  namespace: kube-system
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: {{ k8s_docker_registry_auth_token }}

---

apiVersion: v1
kind: Secret
metadata:
  name: registry-pull-secret
  namespace: kube-public
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: {{ k8s_docker_registry_auth_token }}

---

apiVersion: v1
kind: Secret
metadata:
  name: registry-pull-secret
  namespace: default
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: {{ k8s_docker_registry_auth_token }}

{% for namespace in k8s_namespaces %}
---

apiVersion: v1
kind: Secret
metadata:
  name: registry-pull-secret
  namespace: {{ namespace }}
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: {{ k8s_docker_registry_auth_token }}

{% endfor %}
---

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: kube-registry
  namespace: kube-system
  labels:
    k8s-app: kube-registry
    version: v0
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: kube-registry
      version: v0
  template:
    metadata:
      labels:
        k8s-app: kube-registry
        version: v0
        kubernetes.io/cluster-service: "true"
    spec:
      containers:
      - name: registry
        image: {{ k8s_kube_registry_image }}:{{ k8s_kube_registry_image_tag }}
        securityContext:
          privileged: true
        resources:
          # keep request = limit to keep this container in guaranteed class
          limits:
            cpu: 100m
            memory: 100Mi
          requests:
            cpu: 100m
            memory: 100Mi
        env:
        - name: REGISTRY_HTTP_ADDR
          value: :5000
        - name: REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY
          value: /var/lib/registry
        - name: REGISTRY_AUTH_HTPASSWD_REALM
          value: basic_realm
        - name: REGISTRY_AUTH_HTPASSWD_PATH
          value: /auth/htpasswd
        - name: REGISTRY_STORAGE_DELETE_ENABLED
          value: 'true'
        volumeMounts:
        - name: image-store
          mountPath: /var/lib/registry
        - name: auth-dir
          mountPath: /auth
        ports:
        - containerPort: 5000
          name: registry
          protocol: TCP
      volumes:
      - name: auth-dir
        secret:
          secretName: registry-auth-secret
      - name: image-store
        persistentVolumeClaim:
          claimName: kube-registry-claim

---

apiVersion: v1
kind: Service
metadata:
  name: kube-registry
  namespace: kube-system
  labels:
    k8s-app: kube-registry
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
    kubernetes.io/name: "KubeRegistry"
spec:
  selector:
    k8s-app: kube-registry
  ports:
  - name: registry
    port: 5000
    protocol: TCP

---

apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: kube-registry
  namespace: kube-system
  labels:
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
  annotations:
    nginx.org/client-max-body-size: "100m"
spec:
  tls:
  - hosts:
    - {{ k8s_registry_name }}
    secretName: tls-secret
  rules:
  - host: {{ k8s_registry_name }}
    http:
      paths:
      - path: /
        backend:
          serviceName: kube-registry
          servicePort: 5000
