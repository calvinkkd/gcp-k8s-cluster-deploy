---

# Mixer
apiVersion: v1
kind: ConfigMap
metadata:
  name: istio-mixer
  namespace: {{ k8s_istio_namespace }}
data:
  mapping.conf: |-

---

apiVersion: v1
kind: Service
metadata:
  name: istio-mixer
  namespace: {{ k8s_istio_namespace }}
  labels:
    istio: mixer
spec:
  ports:
  - name: tcp
    port: 9091
  - name: http-health
    port: 9093
  - name: configapi
    port: 9094
  - name: statsd-prom
    port: 9102
  - name: statsd-udp
    port: 9125
    protocol: UDP
  - name: prometheus
    port: 42422
  selector:
    istio: mixer

---

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: istio-mixer
  namespace: {{ k8s_istio_namespace }}
  annotations:
    sidecar.istio.io/inject: "false"
spec:
  replicas: 1
  template:
    metadata:
      labels:
        istio: mixer
    spec:
      serviceAccountName: istio-mixer
      containers:
      - name: statsd-to-prometheus
        image: {{ k8s_istio_prometheus_statsd_exporter_image }}:{{ k8s_istio_prometheus_statsd_exporter_image_tag }}
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 9102
        - containerPort: 9125
          protocol: UDP
        args:
        - '-statsd.mapping-config=/etc/statsd/mapping.conf'
        volumeMounts:
        - name: config-volume
          mountPath: /etc/statsd
      - name: mixer
        image: {{ k8s_istio_mixer_image }}:{{ k8s_istio_mixer_image_tag }}
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 9091
        - containerPort: 9094
        - containerPort: 42422
        args:
          - --configStoreURL=fs:///etc/opt/mixer/configroot
          - --configStore2URL=k8s://
          - --configDefaultNamespace={{ k8s_istio_namespace }}
          - --traceOutput=http://zipkin:9411/api/v1/spans
          - --configIdentityAttributeDomain=svc.{{ k8s_cluster_domain }}
          - --logtostderr
          - -v
          - "{{ k8s_log_level }}"
          - --vmodule={{ k8s_log_spec }}
      volumes:
      - name: config-volume
        configMap:
          name: istio-mixer

---

# Pilot service for discovery
apiVersion: v1
kind: ConfigMap
metadata:
  name: istio
  namespace: {{ k8s_istio_namespace }}
data:
  mesh: |-
    # Uncomment the following line to enable mutual TLS between proxies
{% if k8s_istio_auth %}
    authPolicy: MUTUAL_TLS
{% else %}
    # authPolicy: MUTUAL_TLS
{% endif %}
    #
    # Set the following variable to true to disable policy checks by the Mixer.
    # Note that metrics will still be reported to the Mixer.
    disablePolicyChecks: false
    # Set enableTracing to false to disable request tracing.
    enableTracing: true
    #
    # To disable the mixer completely (including metrics), comment out
    # the following line
    mixerAddress: istio-mixer.{{ k8s_istio_namespace }}:9091
    # This is the ingress service name, update if you used a different name
    ingressService: istio-ingress
    egressProxyAddress: istio-egress.{{ k8s_istio_namespace }}:80
    #
    # Along with discoveryRefreshDelay, this setting determines how
    # frequently should Envoy fetch and update its internal configuration
    # from Istio Pilot. Lower refresh delay results in higher CPU
    # utilization and potential performance loss in exchange for faster
    # convergence. Tweak this value according to your setup.
    rdsRefreshDelay: 30s
    #
    defaultConfig:
      # See rdsRefreshDelay for explanation about this setting.
      discoveryRefreshDelay: 30s
      #
      # TCP connection timeout between Envoy & the application, and between Envoys.
      connectTimeout: 10s
      #
      ### ADVANCED SETTINGS #############
      # Where should envoy's configuration be stored in the istio-proxy container
      configPath: "/etc/istio/proxy"
      binaryPath: "/usr/local/bin/envoy"
      # The pseudo service name used for Envoy.
      serviceCluster: istio-proxy
      # These settings that determine how long an old Envoy
      # process should be kept alive after an occasional reload.
      drainDuration: 45s
      parentShutdownDuration: 1m0s
      #
      # Port where Envoy listens (on local host) for admin commands
      # You can exec into the istio-proxy container in a pod and
      # curl the admin port (curl http://localhost:15000/) to obtain
      # diagnostic information from Envoy. See
      # https://lyft.github.io/envoy/docs/operations/admin.html
      # for more details
      proxyAdminPort: 15000
      #
      # Address where Istio Pilot service is running
      discoveryAddress: istio-pilot.{{ k8s_istio_namespace }}:8080
      #
      # Zipkin trace collector
      zipkinAddress: zipkin.{{ k8s_istio_namespace }}:9411
      #
      # Statsd metrics collector. Istio mixer exposes a UDP endpoint
      # to collect and convert statsd metrics into Prometheus metrics.
      statsdUdpAddress: istio-mixer.{{ k8s_istio_namespace }}:9125

---

# Pilot service for discovery
apiVersion: v1
kind: Service
metadata:
  name: istio-pilot
  namespace: {{ k8s_istio_namespace }}
  labels:
    istio: pilot
spec:
  ports:
  - port: 8080
    name: http-discovery
  - port: 443
    name: http-admission-webhook
  selector:
    istio: pilot

---

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: istio-pilot
  namespace: {{ k8s_istio_namespace }}
  annotations:
    sidecar.istio.io/inject: "false"
spec:
  replicas: 1
  template:
    metadata:
      labels:
        istio: pilot
    spec:
      serviceAccountName: istio-pilot
      containers:
      - name: discovery
        image: {{ k8s_istio_pilot_image }}:{{ k8s_istio_pilot_image_tag }}
        imagePullPolicy: IfNotPresent
        args:
          - discovery
          - --domain={{ k8s_cluster_domain }}
          - --admission-service
          - istio-pilot-external
          - -v
          - "{{ k8s_log_level }}"
          - --vmodule={{ k8s_log_spec }}
        ports:
        - containerPort: 8080
        - containerPort: 443
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        volumeMounts:
        - name: config-volume
          mountPath: /etc/istio/config
      volumes:
      - name: config-volume
        configMap:
          name: istio

---

# Istio ingress controller with Istio auth
apiVersion: v1
kind: Service
metadata:
  name: istio-ingress
  namespace: {{ k8s_istio_namespace }}
  labels:
    istio: ingress
spec:
  type: NodePort
  ports:
  - port: 80
    nodePort: 30080
    name: http
  - port: 443
    nodePort: 30443
    name: https
  selector:
    istio: ingress
  externalTrafficPolicy: Local

---

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: istio-ingress
  namespace: {{ k8s_istio_namespace }}
  annotations:
    sidecar.istio.io/inject: "false"
spec:
  replicas: {{ k8s_node_hosts | count }}
  template:
    metadata:
      labels:
        istio: ingress
    spec:
      serviceAccountName: istio-ingress
      containers:
      - name: istio-ingress
        image: {{ k8s_istio_proxy_image }}:{{ k8s_istio_proxy_image_tag }}
        args: 
          - proxy
          - ingress
          - --domain={{ k8s_cluster_domain }}
          - -v
          - "{{ k8s_log_level }}"
          - --vmodule={{ k8s_log_spec }}
          - --discoveryAddress
          - istio-pilot:8080
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 80
        - containerPort: 443
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        volumeMounts:
        - name: istio-certs
          mountPath: /etc/certs
          readOnly: true
        - name: ingress-certs
          mountPath: /etc/istio/ingress-certs
          readOnly: true
      volumes:
      - name: istio-certs
        secret:
          secretName: istio.default
          optional: true
      - name: ingress-certs
        secret:
          secretName: istio-ingress-certs
          optional: true

---

# Istio egress envoy with Istio auth
apiVersion: v1
kind: Service
metadata:
  name: istio-egress
  namespace: {{ k8s_istio_namespace }}
spec:
  ports:
  - port: 80
  selector:
    istio: egress

---

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: istio-egress
  namespace: {{ k8s_istio_namespace }}
  annotations:
    sidecar.istio.io/inject: "false"
spec:
  replicas: 1
  template:
    metadata:
      labels:
        istio: egress
    spec:
      serviceAccountName: istio-egress
      containers:
      - name: istio-egress
        image: {{ k8s_istio_proxy_image }}:{{ k8s_istio_proxy_image_tag }}
        imagePullPolicy: IfNotPresent
        args:
          - proxy
          - egress
          - --domain={{ k8s_cluster_domain }}
          - -v
          - "{{ k8s_log_level }}"
          - --vmodule={{ k8s_log_spec }}
          - --discoveryAddress
          - istio-pilot:8080
        ports:
        - containerPort: 80
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        volumeMounts:
        - name: istio-certs
          mountPath: /etc/certs
          readOnly: true
      volumes:
      - name: istio-certs
        secret:
          secretName: istio.default
          optional: true
